// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.pco.camilo.launcher_shortcuts

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object LauncherShortcutsApiPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * Represents a shortcut item that can be displayed in the app's context menu
 * or as a dynamic/pinned shortcut, depending on the platform.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ShortcutItem (
  /**
   * A unique identifier for the shortcut. This is used by the application
   * to identify which shortcut action was performed by the user.
   */
  val type: String,
  /**
   * Optional iOS-specific configuration for this shortcut item.
   * This includes properties like subtitle and icon specific to iOS.
   */
  val iosConfig: IosConfig? = null,
  /**
   * The localized text that will be displayed as the main label for this
   * shortcut. For example, "Compose new message".
   */
  val localizedTitle: String,
  /**
   * Optional Android-specific configuration for this shortcut item.
   * This includes properties like the icon specific to Android.
   */
  val androidConfig: AndroidConfig? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ShortcutItem {
      val type = pigeonVar_list[0] as String
      val iosConfig = pigeonVar_list[1] as IosConfig?
      val localizedTitle = pigeonVar_list[2] as String
      val androidConfig = pigeonVar_list[3] as AndroidConfig?
      return ShortcutItem(type, iosConfig, localizedTitle, androidConfig)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      iosConfig,
      localizedTitle,
      androidConfig,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is ShortcutItem) {
      return false
    }
    if (this === other) {
      return true
    }
    return LauncherShortcutsApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Android-specific configuration for a [ShortcutItem].
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AndroidConfig (
  /**
   * The name of the icon resource (e.g., a drawable resource name like
   * "ic_shortcut_add"). This is optional.
   */
  val icon: String? = null,
  /**
   * An optional localized subtitle for this shortcut. This text is displayed
   * below the [ShortcutItem.localizedLongLabel] on iOS.
   */
  val localizedLongLabel: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AndroidConfig {
      val icon = pigeonVar_list[0] as String?
      val localizedLongLabel = pigeonVar_list[1] as String?
      return AndroidConfig(icon, localizedLongLabel)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      icon,
      localizedLongLabel,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AndroidConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return LauncherShortcutsApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * iOS-specific configuration for a [ShortcutItem].
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class IosConfig (
  /**
   * The name of the icon resource (e.g., "UIApplicationShortcutIconTypeAdd"
   * or a custom icon name from an asset catalog). This is optional.
   */
  val icon: String? = null,
  /**
   * An optional localized subtitle for this shortcut. This text is displayed
   * below the [ShortcutItem.localizedTitle] on iOS.
   */
  val localizedSubtitle: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): IosConfig {
      val icon = pigeonVar_list[0] as String?
      val localizedSubtitle = pigeonVar_list[1] as String?
      return IosConfig(icon, localizedSubtitle)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      icon,
      localizedSubtitle,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is IosConfig) {
      return false
    }
    if (this === other) {
      return true
    }
    return LauncherShortcutsApiPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class LauncherShortcutsApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ShortcutItem.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AndroidConfig.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          IosConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ShortcutItem -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is AndroidConfig -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is IosConfig -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Defines the primary API for managing shortcuts on the host platform
 * (iOS/Android). This API is called from Flutter to native.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface ShortcutsApi {
  /**
   * Sets (or replaces) the list of dynamic shortcut items for the application.
   *
   * This will overwrite any existing dynamic shortcuts.
   * The [itemsList] contains the [ShortcutItem]s to be set.
   */
  fun setShortcutItems(itemsList: List<ShortcutItem>, callback: (Result<Unit>) -> Unit)
  /** Clears all previously set dynamic shortcut items from the application. */
  fun clearShortcutItems()
  /**
   * Notifies the native side that the Flutter application is initialized
   * and ready to receive and process shortcut actions or other calls.
   */
  fun setFlutterReady(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by ShortcutsApi. */
    val codec: MessageCodec<Any?> by lazy {
      LauncherShortcutsApiPigeonCodec()
    }
    /** Sets up an instance of `ShortcutsApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: ShortcutsApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.setShortcutItems$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val itemsListArg = args[0] as List<ShortcutItem>
            api.setShortcutItems(itemsListArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.clearShortcutItems$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clearShortcutItems()
              listOf(null)
            } catch (exception: Throwable) {
              LauncherShortcutsApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.setFlutterReady$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.setFlutterReady{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Defines the API for handling shortcut actions launched on iOS.
 * This API is called from the native iOS side to Flutter when a shortcut
 * is tapped by the user.
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class IOSShortcutsApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by IOSShortcutsApi. */
    val codec: MessageCodec<Any?> by lazy {
      LauncherShortcutsApiPigeonCodec()
    }
  }
  /**
   * Called when a shortcut action is launched on iOS.
   *
   * The [action] is the `type` (unique identifier) of the
   * [ShortcutItem] that was launched by the user.
   */
  fun launchAction(actionArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.launcher_shortcuts.IOSShortcutsApi.launchAction$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(actionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(LauncherShortcutsApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Defines the API for managing shortcuts specifically on the Android platform.
 * This API is called from Flutter to native Android.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface AndroidShortcutsApi {
  /**
   * Retrieves the initial action if the app was launched from a shortcut.
   *
   * Returns the `type` (unique identifier) of the [ShortcutItem] if the app
   * was launched via a shortcut, or null if not launched from a shortcut
   * or if no action is pending.
   */
  fun getLaunchAction(): String?
  /**
   * Sets the list of dynamic shortcut items on Android.
   *
   * This will overwrite any existing dynamic shortcuts. Static shortcuts
   * defined in `shortcuts.xml` are not affected.
   * The [itemsList] contains the [ShortcutItem]s to be set.
   */
  fun setShortcutItems(itemsList: List<ShortcutItem>, callback: (Result<Unit>) -> Unit)
  /**
   * Clears all previously set dynamic shortcut items on Android.
   * Static shortcuts defined in `shortcuts.xml` are not affected.
   */
  fun clearShortcutItems()
  /**
   * Notifies the Android native side that the Flutter application is
   * initialized and ready to receive and process shortcut actions.
   */
  fun setFlutterReady(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by AndroidShortcutsApi. */
    val codec: MessageCodec<Any?> by lazy {
      LauncherShortcutsApiPigeonCodec()
    }
    /** Sets up an instance of `AndroidShortcutsApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: AndroidShortcutsApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.getLaunchAction$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getLaunchAction())
            } catch (exception: Throwable) {
              LauncherShortcutsApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.setShortcutItems$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val itemsListArg = args[0] as List<ShortcutItem>
            api.setShortcutItems(itemsListArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.clearShortcutItems$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clearShortcutItems()
              listOf(null)
            } catch (exception: Throwable) {
              LauncherShortcutsApiPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.setFlutterReady$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.setFlutterReady{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapError(error))
              } else {
                reply.reply(LauncherShortcutsApiPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Defines the API for handling shortcut actions launched on Android.
 * This API is called from the native Android side to Flutter when a shortcut
 * is tapped by the user.
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class AndroidShortcutsFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by AndroidShortcutsFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      LauncherShortcutsApiPigeonCodec()
    }
  }
  /**
   * Called when a shortcut action is launched on Android.
   *
   * The [action] is the `type` (unique identifier) of the
   * [ShortcutItem] that was launched. This corresponds to the intent action
   * or shortcut ID from the Android system.
   */
  fun launchAction(actionArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsFlutterApi.launchAction$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(actionArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(LauncherShortcutsApiPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
