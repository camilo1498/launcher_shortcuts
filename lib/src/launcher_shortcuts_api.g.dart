// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


/// Represents a shortcut item that can be displayed in the app's context menu
/// or as a dynamic/pinned shortcut, depending on the platform.
class ShortcutItem {
  ShortcutItem({
    required this.type,
    this.iosConfig,
    required this.localizedTitle,
    this.androidConfig,
  });

  /// A unique identifier for the shortcut. This is used by the application
  /// to identify which shortcut action was performed by the user.
  String type;

  /// Optional iOS-specific configuration for this shortcut item.
  /// This includes properties like subtitle and icon specific to iOS.
  IosConfig? iosConfig;

  /// The localized text that will be displayed as the main label for this
  /// shortcut. For example, "Compose new message".
  String localizedTitle;

  /// Optional Android-specific configuration for this shortcut item.
  /// This includes properties like the icon specific to Android.
  AndroidConfig? androidConfig;

  List<Object?> _toList() {
    return <Object?>[
      type,
      iosConfig,
      localizedTitle,
      androidConfig,
    ];
  }

  Object encode() {
    return _toList();  }

  static ShortcutItem decode(Object result) {
    result as List<Object?>;
    return ShortcutItem(
      type: result[0]! as String,
      iosConfig: result[1] as IosConfig?,
      localizedTitle: result[2]! as String,
      androidConfig: result[3] as AndroidConfig?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ShortcutItem || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Android-specific configuration for a [ShortcutItem].
class AndroidConfig {
  AndroidConfig({
    this.icon,
    this.localizedLongLabel,
  });

  /// The name of the icon resource (e.g., a drawable resource name like
  /// "ic_shortcut_add"). This is optional.
  String? icon;

  /// An optional localized subtitle for this shortcut. This text is displayed
  /// below the [ShortcutItem.localizedLongLabel] on iOS.
  String? localizedLongLabel;

  List<Object?> _toList() {
    return <Object?>[
      icon,
      localizedLongLabel,
    ];
  }

  Object encode() {
    return _toList();  }

  static AndroidConfig decode(Object result) {
    result as List<Object?>;
    return AndroidConfig(
      icon: result[0] as String?,
      localizedLongLabel: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! AndroidConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// iOS-specific configuration for a [ShortcutItem].
class IosConfig {
  IosConfig({
    this.icon,
    this.localizedSubtitle,
  });

  /// The name of the icon resource (e.g., "UIApplicationShortcutIconTypeAdd"
  /// or a custom icon name from an asset catalog). This is optional.
  String? icon;

  /// An optional localized subtitle for this shortcut. This text is displayed
  /// below the [ShortcutItem.localizedTitle] on iOS.
  String? localizedSubtitle;

  List<Object?> _toList() {
    return <Object?>[
      icon,
      localizedSubtitle,
    ];
  }

  Object encode() {
    return _toList();  }

  static IosConfig decode(Object result) {
    result as List<Object?>;
    return IosConfig(
      icon: result[0] as String?,
      localizedSubtitle: result[1] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! IosConfig || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is ShortcutItem) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is AndroidConfig) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is IosConfig) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return ShortcutItem.decode(readValue(buffer)!);
      case 130: 
        return AndroidConfig.decode(readValue(buffer)!);
      case 131: 
        return IosConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Defines the primary API for managing shortcuts on the host platform
/// (iOS/Android). This API is called from Flutter to native.
class ShortcutsApi {
  /// Constructor for [ShortcutsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ShortcutsApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Sets (or replaces) the list of dynamic shortcut items for the application.
  ///
  /// This will overwrite any existing dynamic shortcuts.
  /// The [itemsList] contains the [ShortcutItem]s to be set.
  Future<void> setShortcutItems(List<ShortcutItem> itemsList) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.setShortcutItems$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[itemsList]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Clears all previously set dynamic shortcut items from the application.
  Future<void> clearShortcutItems() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.clearShortcutItems$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Notifies the native side that the Flutter application is initialized
  /// and ready to receive and process shortcut actions or other calls.
  Future<void> setFlutterReady() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.setFlutterReady$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

/// Defines the API for handling shortcut actions launched on iOS.
/// This API is called from the native iOS side to Flutter when a shortcut
/// is tapped by the user.
abstract class IOSShortcutsApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Called when a shortcut action is launched on iOS.
  ///
  /// The [action] is the `type` (unique identifier) of the
  /// [ShortcutItem] that was launched by the user.
  void launchAction(String action);

  static void setUp(IOSShortcutsApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.launcher_shortcuts.IOSShortcutsApi.launchAction$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.launcher_shortcuts.IOSShortcutsApi.launchAction was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_action = (args[0] as String?);
          assert(arg_action != null,
              'Argument for dev.flutter.pigeon.launcher_shortcuts.IOSShortcutsApi.launchAction was null, expected non-null String.');
          try {
            api.launchAction(arg_action!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

/// Defines the API for managing shortcuts specifically on the Android platform.
/// This API is called from Flutter to native Android.
class AndroidShortcutsApi {
  /// Constructor for [AndroidShortcutsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AndroidShortcutsApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Retrieves the initial action if the app was launched from a shortcut.
  ///
  /// Returns the `type` (unique identifier) of the [ShortcutItem] if the app
  /// was launched via a shortcut, or null if not launched from a shortcut
  /// or if no action is pending.
  Future<String?> getLaunchAction() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.getLaunchAction$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  /// Sets the list of dynamic shortcut items on Android.
  ///
  /// This will overwrite any existing dynamic shortcuts. Static shortcuts
  /// defined in `shortcuts.xml` are not affected.
  /// The [itemsList] contains the [ShortcutItem]s to be set.
  Future<void> setShortcutItems(List<ShortcutItem> itemsList) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.setShortcutItems$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[itemsList]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Clears all previously set dynamic shortcut items on Android.
  /// Static shortcuts defined in `shortcuts.xml` are not affected.
  Future<void> clearShortcutItems() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.clearShortcutItems$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Notifies the Android native side that the Flutter application is
  /// initialized and ready to receive and process shortcut actions.
  Future<void> setFlutterReady() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.setFlutterReady$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

/// Defines the API for handling shortcut actions launched on Android.
/// This API is called from the native Android side to Flutter when a shortcut
/// is tapped by the user.
abstract class AndroidShortcutsFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Called when a shortcut action is launched on Android.
  ///
  /// The [action] is the `type` (unique identifier) of the
  /// [ShortcutItem] that was launched. This corresponds to the intent action
  /// or shortcut ID from the Android system.
  void launchAction(String action);

  static void setUp(AndroidShortcutsFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsFlutterApi.launchAction$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsFlutterApi.launchAction was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_action = (args[0] as String?);
          assert(arg_action != null,
              'Argument for dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsFlutterApi.launchAction was null, expected non-null String.');
          try {
            api.launchAction(arg_action!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
