// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualslauncher_shortcuts_api(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualslauncher_shortcuts_api(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualslauncher_shortcuts_api(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashlauncher_shortcuts_api(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashlauncher_shortcuts_api(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashlauncher_shortcuts_api(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Represents a shortcut item that can be displayed in the app's context menu
/// or as a dynamic/pinned shortcut, depending on the platform.
///
/// Generated class from Pigeon that represents data sent in messages.
struct ShortcutItem: Hashable {
  /// A unique identifier for the shortcut. This is used by the application
  /// to identify which shortcut action was performed by the user.
  var type: String
  /// Optional iOS-specific configuration for this shortcut item.
  /// This includes properties like subtitle and icon specific to iOS.
  var iosConfig: IosConfig? = nil
  /// The localized text that will be displayed as the main label for this
  /// shortcut. For example, "Compose new message".
  var localizedTitle: String
  /// Optional Android-specific configuration for this shortcut item.
  /// This includes properties like the icon specific to Android.
  var androidConfig: AndroidConfig? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ShortcutItem? {
    let type = pigeonVar_list[0] as! String
    let iosConfig: IosConfig? = nilOrValue(pigeonVar_list[1])
    let localizedTitle = pigeonVar_list[2] as! String
    let androidConfig: AndroidConfig? = nilOrValue(pigeonVar_list[3])

    return ShortcutItem(
      type: type,
      iosConfig: iosConfig,
      localizedTitle: localizedTitle,
      androidConfig: androidConfig
    )
  }
  func toList() -> [Any?] {
    return [
      type,
      iosConfig,
      localizedTitle,
      androidConfig,
    ]
  }
  static func == (lhs: ShortcutItem, rhs: ShortcutItem) -> Bool {
    return deepEqualslauncher_shortcuts_api(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashlauncher_shortcuts_api(value: toList(), hasher: &hasher)
  }
}

/// Android-specific configuration for a [ShortcutItem].
///
/// Generated class from Pigeon that represents data sent in messages.
struct AndroidConfig: Hashable {
  /// The name of the icon resource (e.g., a drawable resource name like
  /// "ic_shortcut_add"). This is optional.
  var icon: String? = nil
  /// An optional localized subtitle for this shortcut. This text is displayed
  /// below the [ShortcutItem.localizedLongLabel] on iOS.
  var localizedLongLabel: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AndroidConfig? {
    let icon: String? = nilOrValue(pigeonVar_list[0])
    let localizedLongLabel: String? = nilOrValue(pigeonVar_list[1])

    return AndroidConfig(
      icon: icon,
      localizedLongLabel: localizedLongLabel
    )
  }
  func toList() -> [Any?] {
    return [
      icon,
      localizedLongLabel,
    ]
  }
  static func == (lhs: AndroidConfig, rhs: AndroidConfig) -> Bool {
    return deepEqualslauncher_shortcuts_api(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashlauncher_shortcuts_api(value: toList(), hasher: &hasher)
  }
}

/// iOS-specific configuration for a [ShortcutItem].
///
/// Generated class from Pigeon that represents data sent in messages.
struct IosConfig: Hashable {
  /// The name of the icon resource (e.g., "UIApplicationShortcutIconTypeAdd"
  /// or a custom icon name from an asset catalog). This is optional.
  var icon: String? = nil
  /// An optional localized subtitle for this shortcut. This text is displayed
  /// below the [ShortcutItem.localizedTitle] on iOS.
  var localizedSubtitle: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IosConfig? {
    let icon: String? = nilOrValue(pigeonVar_list[0])
    let localizedSubtitle: String? = nilOrValue(pigeonVar_list[1])

    return IosConfig(
      icon: icon,
      localizedSubtitle: localizedSubtitle
    )
  }
  func toList() -> [Any?] {
    return [
      icon,
      localizedSubtitle,
    ]
  }
  static func == (lhs: IosConfig, rhs: IosConfig) -> Bool {
    return deepEqualslauncher_shortcuts_api(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashlauncher_shortcuts_api(value: toList(), hasher: &hasher)
  }
}

private class LauncherShortcutsApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return ShortcutItem.fromList(self.readValue() as! [Any?])
    case 130:
      return AndroidConfig.fromList(self.readValue() as! [Any?])
    case 131:
      return IosConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class LauncherShortcutsApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ShortcutItem {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? AndroidConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? IosConfig {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LauncherShortcutsApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LauncherShortcutsApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LauncherShortcutsApiPigeonCodecWriter(data: data)
  }
}

class LauncherShortcutsApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = LauncherShortcutsApiPigeonCodec(readerWriter: LauncherShortcutsApiPigeonCodecReaderWriter())
}


/// Defines the primary API for managing shortcuts on the host platform
/// (iOS/Android). This API is called from Flutter to native.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ShortcutsApi {
  /// Sets (or replaces) the list of dynamic shortcut items for the application.
  ///
  /// This will overwrite any existing dynamic shortcuts.
  /// The [itemsList] contains the [ShortcutItem]s to be set.
  func setShortcutItems(itemsList: [ShortcutItem], completion: @escaping (Result<Void, Error>) -> Void)
  /// Clears all previously set dynamic shortcut items from the application.
  func clearShortcutItems() throws
  /// Notifies the native side that the Flutter application is initialized
  /// and ready to receive and process shortcut actions or other calls.
  func setFlutterReady(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ShortcutsApiSetup {
  static var codec: FlutterStandardMessageCodec { LauncherShortcutsApiPigeonCodec.shared }
  /// Sets up an instance of `ShortcutsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ShortcutsApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Sets (or replaces) the list of dynamic shortcut items for the application.
    ///
    /// This will overwrite any existing dynamic shortcuts.
    /// The [itemsList] contains the [ShortcutItem]s to be set.
    let setShortcutItemsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.setShortcutItems\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setShortcutItemsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let itemsListArg = args[0] as! [ShortcutItem]
        api.setShortcutItems(itemsList: itemsListArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setShortcutItemsChannel.setMessageHandler(nil)
    }
    /// Clears all previously set dynamic shortcut items from the application.
    let clearShortcutItemsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.clearShortcutItems\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearShortcutItemsChannel.setMessageHandler { _, reply in
        do {
          try api.clearShortcutItems()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearShortcutItemsChannel.setMessageHandler(nil)
    }
    /// Notifies the native side that the Flutter application is initialized
    /// and ready to receive and process shortcut actions or other calls.
    let setFlutterReadyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.launcher_shortcuts.ShortcutsApi.setFlutterReady\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setFlutterReadyChannel.setMessageHandler { _, reply in
        api.setFlutterReady { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setFlutterReadyChannel.setMessageHandler(nil)
    }
  }
}
/// Defines the API for handling shortcut actions launched on iOS.
/// This API is called from the native iOS side to Flutter when a shortcut
/// is tapped by the user.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol IOSShortcutsApiProtocol {
  /// Called when a shortcut action is launched on iOS.
  ///
  /// The [action] is the `type` (unique identifier) of the
  /// [ShortcutItem] that was launched by the user.
  func launchAction(action actionArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class IOSShortcutsApi: IOSShortcutsApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: LauncherShortcutsApiPigeonCodec {
    return LauncherShortcutsApiPigeonCodec.shared
  }
  /// Called when a shortcut action is launched on iOS.
  ///
  /// The [action] is the `type` (unique identifier) of the
  /// [ShortcutItem] that was launched by the user.
  func launchAction(action actionArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.launcher_shortcuts.IOSShortcutsApi.launchAction\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([actionArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Defines the API for managing shortcuts specifically on the Android platform.
/// This API is called from Flutter to native Android.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AndroidShortcutsApi {
  /// Retrieves the initial action if the app was launched from a shortcut.
  ///
  /// Returns the `type` (unique identifier) of the [ShortcutItem] if the app
  /// was launched via a shortcut, or null if not launched from a shortcut
  /// or if no action is pending.
  func getLaunchAction() throws -> String?
  /// Sets the list of dynamic shortcut items on Android.
  ///
  /// This will overwrite any existing dynamic shortcuts. Static shortcuts
  /// defined in `shortcuts.xml` are not affected.
  /// The [itemsList] contains the [ShortcutItem]s to be set.
  func setShortcutItems(itemsList: [ShortcutItem], completion: @escaping (Result<Void, Error>) -> Void)
  /// Clears all previously set dynamic shortcut items on Android.
  /// Static shortcuts defined in `shortcuts.xml` are not affected.
  func clearShortcutItems() throws
  /// Notifies the Android native side that the Flutter application is
  /// initialized and ready to receive and process shortcut actions.
  func setFlutterReady(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AndroidShortcutsApiSetup {
  static var codec: FlutterStandardMessageCodec { LauncherShortcutsApiPigeonCodec.shared }
  /// Sets up an instance of `AndroidShortcutsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AndroidShortcutsApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Retrieves the initial action if the app was launched from a shortcut.
    ///
    /// Returns the `type` (unique identifier) of the [ShortcutItem] if the app
    /// was launched via a shortcut, or null if not launched from a shortcut
    /// or if no action is pending.
    let getLaunchActionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.getLaunchAction\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getLaunchActionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getLaunchAction()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getLaunchActionChannel.setMessageHandler(nil)
    }
    /// Sets the list of dynamic shortcut items on Android.
    ///
    /// This will overwrite any existing dynamic shortcuts. Static shortcuts
    /// defined in `shortcuts.xml` are not affected.
    /// The [itemsList] contains the [ShortcutItem]s to be set.
    let setShortcutItemsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.setShortcutItems\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setShortcutItemsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let itemsListArg = args[0] as! [ShortcutItem]
        api.setShortcutItems(itemsList: itemsListArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setShortcutItemsChannel.setMessageHandler(nil)
    }
    /// Clears all previously set dynamic shortcut items on Android.
    /// Static shortcuts defined in `shortcuts.xml` are not affected.
    let clearShortcutItemsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.clearShortcutItems\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearShortcutItemsChannel.setMessageHandler { _, reply in
        do {
          try api.clearShortcutItems()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearShortcutItemsChannel.setMessageHandler(nil)
    }
    /// Notifies the Android native side that the Flutter application is
    /// initialized and ready to receive and process shortcut actions.
    let setFlutterReadyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsApi.setFlutterReady\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setFlutterReadyChannel.setMessageHandler { _, reply in
        api.setFlutterReady { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setFlutterReadyChannel.setMessageHandler(nil)
    }
  }
}
/// Defines the API for handling shortcut actions launched on Android.
/// This API is called from the native Android side to Flutter when a shortcut
/// is tapped by the user.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol AndroidShortcutsFlutterApiProtocol {
  /// Called when a shortcut action is launched on Android.
  ///
  /// The [action] is the `type` (unique identifier) of the
  /// [ShortcutItem] that was launched. This corresponds to the intent action
  /// or shortcut ID from the Android system.
  func launchAction(action actionArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class AndroidShortcutsFlutterApi: AndroidShortcutsFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: LauncherShortcutsApiPigeonCodec {
    return LauncherShortcutsApiPigeonCodec.shared
  }
  /// Called when a shortcut action is launched on Android.
  ///
  /// The [action] is the `type` (unique identifier) of the
  /// [ShortcutItem] that was launched. This corresponds to the intent action
  /// or shortcut ID from the Android system.
  func launchAction(action actionArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.launcher_shortcuts.AndroidShortcutsFlutterApi.launchAction\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([actionArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
